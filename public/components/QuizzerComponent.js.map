{"version":3,"sources":["components/QuizzerComponent.js"],"names":["window","FC","undefined","QuizzerComponent","state","currentCard","showFront","cb","set","shuffledCards","_","shuffle","cards","slice","setState","summary","sessionCorrectCount","sessionIncorrectCount","skipped","UserData","getSet","props","params","setId","copiedState","Object","assign","currentPosition","length","console","log","card","correctCount","incrementCorrectCountOnCard","id","endResetValidation","incrementIncorrectCountOnCard","cardShower","cardNavigation","quizSummary","quizRestart","ReactRouter","browserHistory","goBack","textToShow","front","back","evt","cardClicked","markCorrect","markIncorrect","skipCard","React","Component"],"mappings":"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","file":"QuizzerComponent.js","sourcesContent":["if (window.FC === undefined) { window.FC = {}; }\n\n(function() {\n\n  class QuizzerComponent extends React.Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        currentCard: 0,\n        showFront: true\n      }\n    }\n\n    componentDidMount() {\n      var cb = (set) => {\n        // copy and shuffle array\n        var shuffledCards = _.shuffle(set.cards.slice(0));\n\n        this.setState({\n          cards: shuffledCards,\n          currentCard: 0,\n          showFront: true,\n          summary: false,\n          sessionCorrectCount: 0,\n          sessionIncorrectCount: 0,\n          skipped: 0\n        });\n      };\n\n      FC.UserData.getSet(this.props.params.setId, cb);\n\n    }\n\n    cardClicked() {\n      var copiedState = Object.assign({}, this.state);\n      copiedState.showFront = !copiedState.showFront;\n\n      this.setState(copiedState);\n    }\n\n    endResetValidation(){\n      var currentPosition = this.state.currentCard;\n      if (currentPosition + 1 >= this.state.cards.length) {\n        console.log('current position', currentPosition);\n        var copiedState = Object.assign({}, this.state);\n        copiedState.summary = true;\n        this.setState(copiedState);\n        return;\n      }\n      else if (currentPosition + 1 >= 10) {\n        var copiedState = Object.assign({}, this.state);\n        copiedState.summary = true;\n        this.setState(copiedState);\n        return;\n      }\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    markCorrect() {\n      var card = this.state.cards[this.state.currentCard];\n      this.state.sessionCorrectCount += 1;\n      console.log('correct count', card.correctCount);\n      FC.UserData.incrementCorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      this.endResetValidation();\n\n    }\n\n    markIncorrect() {\n      var card = this.state.cards[this.state.currentCard];\n      this.state.sessionIncorrectCount += 1;\n      FC.UserData.incrementIncorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      this.endResetValidation();\n\n    }\n\n    quizRestart() {\n\n      var shuffledCards = _.shuffle(this.state.cards.slice(0));\n\n      this.setState({\n        cards: shuffledCards,\n        currentCard: 0,\n        showFront: true,\n        summary: false,\n        sessionCorrectCount: 0,\n        sessionIncorrectCount: 0,\n        skipped: 0\n      });\n    }\n\n    skipCard() {\n      var currentPosition = this.state.currentCard;\n\n      if (currentPosition + 1 >= this.state.cards.length) {\n        var copiedState = Object.assign({}, this.state);\n        copiedState.summary = true;\n        copiedState.skipped += 1;\n        this.setState(copiedState);\n        return;\n      }\n      else if (currentPosition + 1 >= 10) {\n        var copiedState = Object.assign({}, this.state);\n        copiedState.summary = true;\n        copiedState.skipped += 1;\n        this.setState(copiedState);\n        return;\n      }\n\n      var copiedState = Object.assign({}, this.state);\n      copiedState.skipped += 1;\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    render() {\n\n      var cardShower;\n      var cardNavigation;\n      var quizSummary;\n\n      if (this.state.summary === true) {\n\n        quizSummary = <div><h2>Summary</h2>\n          <p>Correct: {this.state.sessionCorrectCount}</p>\n          <p>Incorrect: {this.state.sessionIncorrectCount}</p>\n          <p>Skipped: {this.state.skipped}</p>\n          <p className=\"p-button\" onClick={() => { this.quizRestart(); }}>Quiz Restart</p>\n          <p className=\"p-button\" onClick={() => { this.quizRestart(); ReactRouter.browserHistory.goBack(); }}>Back to set list</p>\n        </div>\n\n      }\n\n      else if (this.state.cards !== undefined && this.state.cards.length > 0) {\n        var currentCard = this.state.cards[this.state.currentCard];\n        var textToShow = this.state.showFront ? currentCard.front: currentCard.back;\n\n        cardShower = <div>\n          <div>Card count: {this.state.cards.length}</div>\n          <div className=\"card\" onClick={(evt) => { this.cardClicked(evt); }}>\n          {textToShow}\n          </div>\n        </div>\n\n\n        cardNavigation = <div className=\"card-navigation\">\n          <div className=\"correct\" onClick={() => { this.markCorrect();}}>Correct</div>\n          <div className=\"incorrect\" onClick={() => {this.markIncorrect();}}>Incorrect</div>\n          <div onClick={() => { this.skipCard(); }}>Skip</div>\n        </div>;\n      }\n\n\n      return <div className=\"quizzer\">\n        <h1>The Quizzer</h1>\n\n        {quizSummary}\n        {cardShower}\n        {cardNavigation}\n      </div>\n    }\n\n  }\n\n  FC.QuizzerComponent = QuizzerComponent;\n\n})();\n"]}