{"version":3,"sources":["components/QuizzerComponent.js"],"names":["window","FC","undefined","QuizzerComponent","state","currentCard","showFront","cb","set","shuffledCards","_","shuffle","cards","slice","setState","summary","sessionCorrectCount","sessionIncorrectCount","UserData","getSet","props","params","setId","copiedState","Object","assign","currentPosition","length","card","console","log","correctCount","incrementCorrectCountOnCard","id","endResetValidation","incrementIncorrectCountOnCard","cardShower","cardNavigation","quizSummary","quizRestart","ReactRouter","browserHistory","goBack","textToShow","front","back","evt","cardClicked","markCorrect","markIncorrect","React","Component"],"mappings":"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","file":"QuizzerComponent.js","sourcesContent":["if (window.FC === undefined) { window.FC = {}; }\n\n(function() {\n\n  class QuizzerComponent extends React.Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        currentCard: 0,\n        showFront: true\n      }\n    }\n\n    componentDidMount() {\n      var cb = (set) => {\n        // copy and shuffle array\n        var shuffledCards = _.shuffle(set.cards.slice(0));\n\n        this.setState({\n          cards: shuffledCards,\n          currentCard: 0,\n          showFront: true,\n          summary: false,\n          sessionCorrectCount: 0,\n          sessionIncorrectCount: 0\n        });\n      };\n\n      FC.UserData.getSet(this.props.params.setId, cb);\n\n    }\n\n    cardClicked() {\n      var copiedState = Object.assign({}, this.state);\n      copiedState.showFront = !copiedState.showFront;\n\n      this.setState(copiedState);\n    }\n\n    endResetValidation(){\n      var currentPosition = this.state.currentCard;\n      if (currentPosition + 1 >= this.state.cards.length) {\n        var copiedState = Object.assign({}, this.state);\n        copiedState.summary = true;\n        this.setState(copiedState);\n        return;\n      }\n      var copiedState = Object.assign({}, this.state);\n      copiedState.currentCard += 1;\n      this.setState(copiedState);\n    }\n\n    markCorrect() {\n      var card = this.state.cards[this.state.currentCard];\n      this.state.sessionCorrectCount += 1;\n      console.log('correct count', card.correctCount);\n      FC.UserData.incrementCorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      this.endResetValidation();\n\n    }\n\n    markIncorrect() {\n      var card = this.state.cards[this.state.currentCard];\n      this.state.sessionIncorrectCount += 1;\n      FC.UserData.incrementIncorrectCountOnCard(this.props.params.setId, card.id, () => {});\n\n      this.endResetValidation();\n\n    }\n\n    quizRestart() {\n\n      var shuffledCards = _.shuffle(this.state.cards.slice(0));\n\n      this.setState({\n        cards: shuffledCards,\n        currentCard: 0,\n        showFront: true,\n        summary: false,\n        sessionCorrectCount: 0,\n        sessionIncorrectCount: 0\n      });\n    }\n\n    render() {\n\n      var cardShower;\n      var cardNavigation;\n      var quizSummary;\n\n      if (this.state.summary === true) {\n\n        quizSummary = <div><h2>Summary</h2>\n          <p>Correct: {this.state.sessionCorrectCount}</p>\n          <p>Incorrect: {this.state.sessionIncorrectCount}</p>\n          <p className=\"p-button\" onClick={() => { this.quizRestart(); }}>Quiz Restart</p>\n          <p className=\"p-button\" onClick={() => { this.quizRestart(); ReactRouter.browserHistory.goBack(); }}>Back to set list</p>\n        </div>\n\n      }\n\n      else if (this.state.cards !== undefined && this.state.cards.length > 0) {\n        var currentCard = this.state.cards[this.state.currentCard];\n        var textToShow = this.state.showFront ? currentCard.front: currentCard.back;\n\n        cardShower = <div>\n          <div>Card count: {this.state.cards.length}</div>\n          <div\n            className=\"card\"\n            onClick={(evt) => { this.cardClicked(evt); }}>\n            {textToShow}</div>\n        </div>\n\n\n        cardNavigation = <div className=\"card-navigation\">\n          <div className=\"correct\" onClick={() => { this.markCorrect();}}>Correct</div>\n          <div className=\"incorrect\" onClick={() => {this.markIncorrect();}}>Incorrect</div>\n        </div>;\n      }\n\n\n      return <div className=\"quizzer\">\n        <h1>The Quizzer</h1>\n\n        {quizSummary}\n        {cardShower}\n        {cardNavigation}\n      </div>\n    }\n\n  }\n\n  FC.QuizzerComponent = QuizzerComponent;\n\n})();\n"]}