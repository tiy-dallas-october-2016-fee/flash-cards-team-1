{"version":3,"sources":["components/SetListComponent.js"],"names":["window","FC","undefined","SetListComponent","state","sets","sortBy","loadSets","UserData","data","setState","clonedArray","slice","sort","a","b","name","cards","length","setId","$","ajax","url","method","done","ReactRouter","hashHistory","push","console","log","noSetsMessaging","theSortingHat","nameSorting","cardSorting","map","set","index","noCardsMessaging","navigateToQuiz","id","description","deleteSet","addCards","React","Component"],"mappings":"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","file":"SetListComponent.js","sourcesContent":["if (window.FC === undefined) { window.FC = {}; }\n\n(function() {\n\n  class SetListComponent extends React.Component {\n\n    constructor() {\n      super();\n\n      this.state = {\n        sets: [],\n        sortBy: 'name'\n      }\n    }\n\n    componentDidMount() {\n      this.loadSets();\n    }\n\n    loadSets() {\n      FC.UserData.loadSets((data) => {\n        this.setState({\n          sets: data.sets,\n          sortBy: this.state.sortBy\n        });\n      });\n    }\n\n    nameSorting(){\n      var clonedArray = this.state.sets.slice(0);\n      clonedArray = clonedArray.sort((a, b) => {return a.name > b.name; });\n\n      this.setState({\n        sets: clonedArray,\n        sortBy: 'name'\n      })\n    }\n\n    cardSorting(){\n      var clonedArray = this.state.sets.slice(0);\n      clonedArray = clonedArray.sort((a, b) => {return a.cards.length < b.cards.length; });\n\n      this.setState({\n        sets: clonedArray,\n        sortBy: 'cardCount'\n      })\n    }\n\n    deleteSet(setId) {\n      $.ajax({\n        url: '/api/sets/' + setId,\n        method: 'DELETE'\n      })\n      .done(() => {\n        this.loadSets();\n      });\n    }\n\n    addCards(setId) {\n      ReactRouter.hashHistory.push('/set/' + setId);\n    }\n\n    navigateToQuiz(setId) {\n        ReactRouter.hashHistory.push('/set/' + setId + '/quizzer');\n   }\n\n    render() {\n      console.log('SetList.render', this.state);\n\n      var noSetsMessaging;\n      if (this.state.sets.length === 0) {\n        noSetsMessaging = <p>You do not have any sets! Create one.</p>\n      }\n\n      var theSortingHat = 'sorting';\n      if (this.state.sortBy === 'name') {\n        theSortingHat += 'by-name';\n      } else {\n        theSortingHat += 'by-count'\n      }\n\n      return <div className=\"set-list\">\n        <h2>Set List</h2>\n\n        {noSetsMessaging}\n\n        <ReactRouter.Link to=\"/create-set\">Create new set</ReactRouter.Link>\n\n        <div className={theSortingHat}>\n          <div className=\"by-name\" onClick={() => this.nameSorting() }>By Name</div>\n          <div className=\"by-card-count\" onClick={() => this.cardSorting() }>By # of Cards</div>\n        </div>\n\n        <ul>\n        {this.state.sets.map((set, index) => {\n          var noCardsMessaging;\n          if (set.cards.length > 0) {\n            noCardsMessaging = <div className=\"button quiz\" onClick={() => {this.navigateToQuiz(set.id, set.cards.length)}}>quiz</div>\n          }\n          return <li key={set.id} className=\"set\">\n            <div className=\"set-name\">{set.name}</div>\n            <div className=\"number-of-cards\"># of cards: {set.cards.length}</div>\n            <p>{set.description}</p>\n\n            <div className=\"button delete-set\" onClick={() => {this.deleteSet(set.id)}}>delete</div>\n            <div className=\"button add-cards\" onClick={() => {this.addCards(set.id)}}>add cards</div>\n\n            {noCardsMessaging}\n          </li>\n        })}\n        </ul>\n      </div>;\n    }\n  }\n\n  FC.SetListComponent = SetListComponent;\n})();\n"]}