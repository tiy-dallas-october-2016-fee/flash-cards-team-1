{"version":3,"sources":["components/SetEditorComponent.js"],"names":["window","FC","undefined","SetEditorComponent","state","evt","preventDefault","makeAjaxCall","nameInput","value","console","log","setState","nameInvalid","descriptionTextarea","textAreaInvalid","$","ajax","url","method","data","name","description","done","ReactRouter","browserHistory","goBack","nameInputClass","descriptionTextareaClass","submitSet","input","textarea","React","Component"],"mappings":";;;;;;;;;;AAAA,IAAIA,OAAOC,EAAP,KAAcC,SAAlB,EAA6B;AAAEF,SAAOC,EAAP,GAAY,EAAZ;AAAiB;;AAEhD,CAAC,YAAW;AAAA,MAEJE,kBAFI;AAAA;;AAIR,kCAAc;AAAA;;AAAA;;AAEZ,YAAKC,KAAL,GAAa,EAAb;AAFY;AAGb;;AAPO;AAAA;AAAA,gCASEC,GATF,EASO;AACbA,YAAIC,cAAJ;AACA,YAAIC,eAAe,IAAnB;;AAEA,YAAI,KAAKC,SAAL,CAAeC,KAAf,KAAyB,EAA7B,EAAiC;AAC/BF,yBAAe,KAAf;AACAG,kBAAQC,GAAR,CAAY,OAAZ;AACA,eAAKC,QAAL,CAAc;AACZC,yBAAa;AADD,WAAd;AAGD,SAND,MAOK;AACHH,kBAAQC,GAAR,CAAY,YAAZ;AACA,eAAKC,QAAL,CAAc;AACZC,yBAAa;AADD,WAAd;AAGD;;AAED,YAAI,KAAKC,mBAAL,CAAyBL,KAAzB,KAAmC,EAAvC,EAA2C;AACzCF,yBAAe,KAAf;AACAG,kBAAQC,GAAR,CAAY,OAAZ;AACA,eAAKC,QAAL,CAAc;AACZG,6BAAiB;AADL,WAAd;AAGD,SAND,MAOK;AACHL,kBAAQC,GAAR,CAAY,YAAZ;AACA,eAAKC,QAAL,CAAc;AACZG,6BAAiB;AADL,WAAd;AAGD;;AAED,YAAIR,YAAJ,EAAkB;AAChBS,YAAEC,IAAF,CAAO;AACLC,iBAAK,WADA;AAELC,oBAAQ,MAFH;AAGLC,kBAAM;AACJC,oBAAM,KAAKb,SAAL,CAAeC,KADjB;AAEJa,2BAAa,KAAKR,mBAAL,CAAyBL;AAFlC;AAHD,WAAP,EAQCc,IARD,CAQM,UAACH,IAAD,EAAU;AACdI,wBAAYC,cAAZ,CAA2BC,MAA3B;AACD,WAVD;AAWD;AAGF;AAxDO;AAAA;AAAA,+BA0DC;AAAA;;AACPhB,gBAAQC,GAAR,CAAY,KAAKP,KAAjB;AACA,YAAIuB,iBAAiB,EAArB;AACA,YAAI,KAAKvB,KAAL,CAAWS,WAAf,EAA4B;AAC1BH,kBAAQC,GAAR,CAAY,iBAAZ;AACAgB,2BAAiB,SAAjB;AACD;;AAED,YAAIC,2BAA2B,EAA/B;AACA,YAAI,KAAKxB,KAAL,CAAWW,eAAf,EAAgC;AAC9Ba,qCAA2B,SAA3B;AAED;;AAED,eAAO;AAAA;AAAA,YAAK,WAAU,YAAf;AACL;AAAA;AAAA;AAAA;AAAA,WADK;AAGL;AAAA;AAAA,cAAM,UAAU,kBAACvB,GAAD,EAAS;AAAE,uBAAKwB,SAAL,CAAexB,GAAf;AAAsB,eAAjD;AAEE,2CAAO,WAAWsB,cAAlB,EAAkC,aAAY,MAA9C,EAAqD,KAAK,aAACG,KAAD,EAAW;AAAE,uBAAKtB,SAAL,GAAiBsB,KAAjB;AAAyB,eAAhG,GAFF;AAIE,8CAAU,WAAWF,wBAArB,EAA+C,aAAY,aAA3D,EAAyE,KAAK,aAACG,QAAD,EAAc;AAAE,uBAAKjB,mBAAL,GAA2BiB,QAA3B;AAAsC,eAApI,GAJF;AAME;AAAA;AAAA;AAAA;AAAA;AANF;AAHK,SAAP;AAYD;AApFO;;AAAA;AAAA,IAEuBC,MAAMC,SAF7B;;AAwFVhC,KAAGE,kBAAH,GAAwBA,kBAAxB;AAED,CA1FD","file":"SetEditorComponent.js","sourcesContent":["if (window.FC === undefined) { window.FC = {}; }\n\n(function() {\n\n  class SetEditorComponent extends React.Component {\n\n    constructor() {\n      super();\n      this.state = {}\n    }\n\n    submitSet(evt) {\n      evt.preventDefault();\n      var makeAjaxCall = true;\n\n      if (this.nameInput.value === '') {\n        makeAjaxCall = false;\n        console.log(\"met 1\");\n        this.setState({\n          nameInvalid: true\n        });\n      }\n      else {\n        console.log(\"met 1 else\");\n        this.setState({\n          nameInvalid: false\n        });\n      }\n\n      if (this.descriptionTextarea.value === '') {\n        makeAjaxCall = false;\n        console.log('met 2');\n        this.setState({\n          textAreaInvalid: true\n        });\n      }\n      else {\n        console.log('met 2 else');\n        this.setState({\n          textAreaInvalid: false\n        });\n      }\n\n      if (makeAjaxCall) {\n        $.ajax({\n          url: '/api/sets',\n          method: 'POST',\n          data: {\n            name: this.nameInput.value,\n            description: this.descriptionTextarea.value\n          }\n        })\n        .done((data) => {\n          ReactRouter.browserHistory.goBack();\n        });\n      }\n\n\n    }\n\n    render() {\n      console.log(this.state);\n      var nameInputClass = '';\n      if (this.state.nameInvalid) {\n        console.log('name is invalid');\n        nameInputClass = 'invalid';\n      }\n\n      var descriptionTextareaClass = '';\n      if (this.state.textAreaInvalid) {\n        descriptionTextareaClass = 'invalid';\n\n      }\n\n      return <div className=\"set-editor\">\n        <h2>Set Editor</h2>\n\n        <form onSubmit={(evt) => { this.submitSet(evt); }}>\n\n          <input className={nameInputClass} placeholder=\"name\" ref={(input) => { this.nameInput = input; }} />\n\n          <textarea className={descriptionTextareaClass} placeholder=\"description\" ref={(textarea) => { this.descriptionTextarea = textarea; }} />\n\n          <button>Save</button>\n        </form>\n      </div>\n    }\n\n  }\n\n  FC.SetEditorComponent = SetEditorComponent;\n\n})();\n"]}